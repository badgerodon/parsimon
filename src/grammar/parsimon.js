module.exports = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "binary_expression": parse_binary_expression,
        "constructor": parse_constructor,
        "function_definition": parse_function_definition,
        "function_definition_parameter": parse_function_definition_parameter,
        "function_definition_parameters": parse_function_definition_parameters,
        "fundamental_expression": parse_fundamental_expression,
        "if_expression": parse_if_expression,
        "if_expression_alternatives": parse_if_expression_alternatives,
        "numeric_literal": parse_numeric_literal,
        "parameters": parse_parameters,
        "post_expression": parse_post_expression,
        "post_expression_tail": parse_post_expression_tail,
        "program": parse_program,
        "record_definition": parse_record_definition,
        "record_definition_field": parse_record_definition_field,
        "record_definition_fields": parse_record_definition_fields,
        "reference": parse_reference,
        "return_expression": parse_return_expression,
        "space": parse_space,
        "string_literal": parse_string_literal,
        "type_identifier": parse_type_identifier,
        "variable_identifier": parse_variable_identifier,
        "while_expression": parse_while_expression
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "program";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_program() {
        var cacheKey = 'program@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = [];
        var result6 = parse_binary_expression();
        while (result6 !== null) {
          result3.push(result6);
          var result6 = parse_binary_expression();
        }
        if (result3 !== null) {
          var result4 = [];
          var result5 = parse_space();
          while (result5 !== null) {
            result4.push(result5);
            var result5 = parse_space();
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(es) {
              return {
                'type': 'program',
                'expressions': es
              };
            })(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_binary_expression() {
        var cacheKey = 'binary_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_post_expression();
        if (result5 !== null) {
          var result6 = [];
          var result27 = parse_space();
          while (result27 !== null) {
            result6.push(result27);
            var result27 = parse_space();
          }
          if (result6 !== null) {
            if (input.substr(pos, 2) === "==") {
              var result26 = "==";
              pos += 2;
            } else {
              var result26 = null;
              if (reportMatchFailures) {
                matchFailed("\"==\"");
              }
            }
            if (result26 !== null) {
              var result7 = result26;
            } else {
              if (input.substr(pos, 2) === "!=") {
                var result25 = "!=";
                pos += 2;
              } else {
                var result25 = null;
                if (reportMatchFailures) {
                  matchFailed("\"!=\"");
                }
              }
              if (result25 !== null) {
                var result7 = result25;
              } else {
                if (input.substr(pos, 1) === "=") {
                  var result24 = "=";
                  pos += 1;
                } else {
                  var result24 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"=\"");
                  }
                }
                if (result24 !== null) {
                  var result7 = result24;
                } else {
                  if (input.substr(pos, 1) === "+") {
                    var result23 = "+";
                    pos += 1;
                  } else {
                    var result23 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"+\"");
                    }
                  }
                  if (result23 !== null) {
                    var result7 = result23;
                  } else {
                    if (input.substr(pos, 1) === "*") {
                      var result22 = "*";
                      pos += 1;
                    } else {
                      var result22 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"*\"");
                      }
                    }
                    if (result22 !== null) {
                      var result7 = result22;
                    } else {
                      if (input.substr(pos, 1) === "-") {
                        var result21 = "-";
                        pos += 1;
                      } else {
                        var result21 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"-\"");
                        }
                      }
                      if (result21 !== null) {
                        var result7 = result21;
                      } else {
                        if (input.substr(pos, 1) === "/") {
                          var result20 = "/";
                          pos += 1;
                        } else {
                          var result20 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"/\"");
                          }
                        }
                        if (result20 !== null) {
                          var result7 = result20;
                        } else {
                          if (input.substr(pos, 1) === "%") {
                            var result19 = "%";
                            pos += 1;
                          } else {
                            var result19 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"%\"");
                            }
                          }
                          if (result19 !== null) {
                            var result7 = result19;
                          } else {
                            if (input.substr(pos, 2) === "&&") {
                              var result18 = "&&";
                              pos += 2;
                            } else {
                              var result18 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"&&\"");
                              }
                            }
                            if (result18 !== null) {
                              var result7 = result18;
                            } else {
                              if (input.substr(pos, 1) === "&") {
                                var result17 = "&";
                                pos += 1;
                              } else {
                                var result17 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"&\"");
                                }
                              }
                              if (result17 !== null) {
                                var result7 = result17;
                              } else {
                                if (input.substr(pos, 2) === "||") {
                                  var result16 = "||";
                                  pos += 2;
                                } else {
                                  var result16 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"||\"");
                                  }
                                }
                                if (result16 !== null) {
                                  var result7 = result16;
                                } else {
                                  if (input.substr(pos, 1) === "|") {
                                    var result15 = "|";
                                    pos += 1;
                                  } else {
                                    var result15 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"|\"");
                                    }
                                  }
                                  if (result15 !== null) {
                                    var result7 = result15;
                                  } else {
                                    if (input.substr(pos, 2) === "<=") {
                                      var result14 = "<=";
                                      pos += 2;
                                    } else {
                                      var result14 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"<=\"");
                                      }
                                    }
                                    if (result14 !== null) {
                                      var result7 = result14;
                                    } else {
                                      if (input.substr(pos, 1) === "<") {
                                        var result13 = "<";
                                        pos += 1;
                                      } else {
                                        var result13 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\"<\"");
                                        }
                                      }
                                      if (result13 !== null) {
                                        var result7 = result13;
                                      } else {
                                        if (input.substr(pos, 2) === ">=") {
                                          var result12 = ">=";
                                          pos += 2;
                                        } else {
                                          var result12 = null;
                                          if (reportMatchFailures) {
                                            matchFailed("\">=\"");
                                          }
                                        }
                                        if (result12 !== null) {
                                          var result7 = result12;
                                        } else {
                                          if (input.substr(pos, 1) === ">") {
                                            var result11 = ">";
                                            pos += 1;
                                          } else {
                                            var result11 = null;
                                            if (reportMatchFailures) {
                                              matchFailed("\">\"");
                                            }
                                          }
                                          if (result11 !== null) {
                                            var result7 = result11;
                                          } else {
                                            var result7 = null;;
                                          };
                                        };
                                      };
                                    };
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            }
            if (result7 !== null) {
              var result8 = [];
              var result10 = parse_space();
              while (result10 !== null) {
                result8.push(result10);
                var result10 = parse_space();
              }
              if (result8 !== null) {
                var result9 = parse_binary_expression();
                if (result9 !== null) {
                  var result3 = [result5, result6, result7, result8, result9];
                } else {
                  var result3 = null;
                  pos = savedPos1;
                }
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        var result4 = result3 !== null
          ? (function(left, op, right) {
                return {
                  'type': 'binary',
                  'left': left,
                  'right': right,
                  'op': op
                }
              })(result3[0], result3[2], result3[4])
          : null;
        if (result4 !== null) {
          var result2 = result4;
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_post_expression();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_post_expression() {
        var cacheKey = 'post_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_fundamental_expression();
        if (result5 !== null) {
          var result7 = parse_post_expression_tail();
          if (result7 !== null) {
            var result6 = [];
            while (result7 !== null) {
              result6.push(result7);
              var result7 = parse_post_expression_tail();
            }
          } else {
            var result6 = null;
          }
          if (result6 !== null) {
            var result3 = [result5, result6];
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        var result4 = result3 !== null
          ? (function(left, tail) {
                var e = tail[0];
                e.left = left;
                for (var i=1; i<tail.length; i++) {
                  tail[i].left = e;
                  e = tail[i];
                }
                return e;
              })(result3[0], result3[1])
          : null;
        if (result4 !== null) {
          var result2 = result4;
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_fundamental_expression();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_post_expression_tail() {
        var cacheKey = 'post_expression_tail@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos6 = pos;
        var savedPos7 = pos;
        if (input.substr(pos, 1) === "(") {
          var result25 = "(";
          pos += 1;
        } else {
          var result25 = null;
          if (reportMatchFailures) {
            matchFailed("\"(\"");
          }
        }
        if (result25 !== null) {
          var result26 = [];
          var result32 = parse_space();
          while (result32 !== null) {
            result26.push(result32);
            var result32 = parse_space();
          }
          if (result26 !== null) {
            var result31 = parse_parameters();
            var result27 = result31 !== null ? result31 : '';
            if (result27 !== null) {
              if (input.substr(pos, 1) === ")") {
                var result28 = ")";
                pos += 1;
              } else {
                var result28 = null;
                if (reportMatchFailures) {
                  matchFailed("\")\"");
                }
              }
              if (result28 !== null) {
                var result29 = [];
                var result30 = parse_space();
                while (result30 !== null) {
                  result29.push(result30);
                  var result30 = parse_space();
                }
                if (result29 !== null) {
                  var result23 = [result25, result26, result27, result28, result29];
                } else {
                  var result23 = null;
                  pos = savedPos7;
                }
              } else {
                var result23 = null;
                pos = savedPos7;
              }
            } else {
              var result23 = null;
              pos = savedPos7;
            }
          } else {
            var result23 = null;
            pos = savedPos7;
          }
        } else {
          var result23 = null;
          pos = savedPos7;
        }
        var result24 = result23 !== null
          ? (function(es) {
                return {
                  'type': 'invocation',
                  'parameters': es
                };
              })(result23[2])
          : null;
        if (result24 !== null) {
          var result22 = result24;
        } else {
          var result22 = null;
          pos = savedPos6;
        }
        if (result22 !== null) {
          var result0 = result22;
        } else {
          var savedPos4 = pos;
          var savedPos5 = pos;
          if (input.substr(pos, 1) === ".") {
            var result20 = ".";
            pos += 1;
          } else {
            var result20 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result20 !== null) {
            var result21 = parse_reference();
            if (result21 !== null) {
              var result18 = [result20, result21];
            } else {
              var result18 = null;
              pos = savedPos5;
            }
          } else {
            var result18 = null;
            pos = savedPos5;
          }
          var result19 = result18 !== null
            ? (function(e) {
                  return {
                    'type': 'member',
                    'right': e
                  };
                })(result18[1])
            : null;
          if (result19 !== null) {
            var result17 = result19;
          } else {
            var result17 = null;
            pos = savedPos4;
          }
          if (result17 !== null) {
            var result0 = result17;
          } else {
            var savedPos2 = pos;
            var savedPos3 = pos;
            if (input.substr(pos, 1) === ":") {
              var result15 = ":";
              pos += 1;
            } else {
              var result15 = null;
              if (reportMatchFailures) {
                matchFailed("\":\"");
              }
            }
            if (result15 !== null) {
              var result16 = parse_reference();
              if (result16 !== null) {
                var result13 = [result15, result16];
              } else {
                var result13 = null;
                pos = savedPos3;
              }
            } else {
              var result13 = null;
              pos = savedPos3;
            }
            var result14 = result13 !== null
              ? (function(e) {
                    return {
                      'type': 'class_member',
                      'right': e
                    }
                  })(result13[1])
              : null;
            if (result14 !== null) {
              var result12 = result14;
            } else {
              var result12 = null;
              pos = savedPos2;
            }
            if (result12 !== null) {
              var result0 = result12;
            } else {
              var savedPos0 = pos;
              var savedPos1 = pos;
              if (input.substr(pos, 1) === "[") {
                var result4 = "[";
                pos += 1;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("\"[\"");
                }
              }
              if (result4 !== null) {
                var result5 = [];
                var result11 = parse_space();
                while (result11 !== null) {
                  result5.push(result11);
                  var result11 = parse_space();
                }
                if (result5 !== null) {
                  var result10 = parse_parameters();
                  var result6 = result10 !== null ? result10 : '';
                  if (result6 !== null) {
                    if (input.substr(pos, 1) === "]") {
                      var result7 = "]";
                      pos += 1;
                    } else {
                      var result7 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"]\"");
                      }
                    }
                    if (result7 !== null) {
                      var result8 = [];
                      var result9 = parse_space();
                      while (result9 !== null) {
                        result8.push(result9);
                        var result9 = parse_space();
                      }
                      if (result8 !== null) {
                        var result2 = [result4, result5, result6, result7, result8];
                      } else {
                        var result2 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result2 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
              var result3 = result2 !== null
                ? (function(es) {
                      return {
                        'type': 'index',
                        'parameters': es
                      }
                    })(result2[2])
                : null;
              if (result3 !== null) {
                var result1 = result3;
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_fundamental_expression() {
        var cacheKey = 'fundamental_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result9 = parse_record_definition();
        if (result9 !== null) {
          var result0 = result9;
        } else {
          var result8 = parse_function_definition();
          if (result8 !== null) {
            var result0 = result8;
          } else {
            var result7 = parse_return_expression();
            if (result7 !== null) {
              var result0 = result7;
            } else {
              var result6 = parse_while_expression();
              if (result6 !== null) {
                var result0 = result6;
              } else {
                var result5 = parse_if_expression();
                if (result5 !== null) {
                  var result0 = result5;
                } else {
                  var result4 = parse_constructor();
                  if (result4 !== null) {
                    var result0 = result4;
                  } else {
                    var result3 = parse_reference();
                    if (result3 !== null) {
                      var result0 = result3;
                    } else {
                      var result2 = parse_numeric_literal();
                      if (result2 !== null) {
                        var result0 = result2;
                      } else {
                        var result1 = parse_string_literal();
                        if (result1 !== null) {
                          var result0 = result1;
                        } else {
                          var result0 = null;;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_record_definition() {
        var cacheKey = 'record_definition@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 6) === "record") {
          var result3 = "record";
          pos += 6;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"record\"");
          }
        }
        if (result3 !== null) {
          var result13 = parse_space();
          if (result13 !== null) {
            var result4 = [];
            while (result13 !== null) {
              result4.push(result13);
              var result13 = parse_space();
            }
          } else {
            var result4 = null;
          }
          if (result4 !== null) {
            if (input.substr(pos, 1) === "{") {
              var result5 = "{";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"{\"");
              }
            }
            if (result5 !== null) {
              var result6 = [];
              var result12 = parse_space();
              while (result12 !== null) {
                result6.push(result12);
                var result12 = parse_space();
              }
              if (result6 !== null) {
                var result11 = parse_record_definition_fields();
                var result7 = result11 !== null ? result11 : '';
                if (result7 !== null) {
                  if (input.substr(pos, 1) === "}") {
                    var result8 = "}";
                    pos += 1;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"}\"");
                    }
                  }
                  if (result8 !== null) {
                    var result9 = [];
                    var result10 = parse_space();
                    while (result10 !== null) {
                      result9.push(result10);
                      var result10 = parse_space();
                    }
                    if (result9 !== null) {
                      var result1 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(fs) {
              return {
                'type': 'record_definition',
                'fields': fs
              };
            })(result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_record_definition_fields() {
        var cacheKey = 'record_definition_fields@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_record_definition_field();
        if (result3 !== null) {
          var result4 = [];
          var result13 = parse_space();
          while (result13 !== null) {
            result4.push(result13);
            var result13 = parse_space();
          }
          if (result4 !== null) {
            var result5 = [];
            var savedPos2 = pos;
            var savedPos3 = pos;
            if (input.substr(pos, 1) === ",") {
              var result9 = ",";
              pos += 1;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("\",\"");
              }
            }
            if (result9 !== null) {
              var result10 = [];
              var result12 = parse_space();
              while (result12 !== null) {
                result10.push(result12);
                var result12 = parse_space();
              }
              if (result10 !== null) {
                var result11 = parse_record_definition_field();
                if (result11 !== null) {
                  var result7 = [result9, result10, result11];
                } else {
                  var result7 = null;
                  pos = savedPos3;
                }
              } else {
                var result7 = null;
                pos = savedPos3;
              }
            } else {
              var result7 = null;
              pos = savedPos3;
            }
            var result8 = result7 !== null
              ? (function(f) { return f; })(result7[2])
              : null;
            if (result8 !== null) {
              var result6 = result8;
            } else {
              var result6 = null;
              pos = savedPos2;
            }
            while (result6 !== null) {
              result5.push(result6);
              var savedPos2 = pos;
              var savedPos3 = pos;
              if (input.substr(pos, 1) === ",") {
                var result9 = ",";
                pos += 1;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result9 !== null) {
                var result10 = [];
                var result12 = parse_space();
                while (result12 !== null) {
                  result10.push(result12);
                  var result12 = parse_space();
                }
                if (result10 !== null) {
                  var result11 = parse_record_definition_field();
                  if (result11 !== null) {
                    var result7 = [result9, result10, result11];
                  } else {
                    var result7 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos3;
                }
              } else {
                var result7 = null;
                pos = savedPos3;
              }
              var result8 = result7 !== null
                ? (function(f) { return f; })(result7[2])
                : null;
              if (result8 !== null) {
                var result6 = result8;
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(f, fs) {
              var arr = [];
              arr.push(f);
              arr.push.apply(arr, fs);
              return arr;
            })(result1[0], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_record_definition_field() {
        var cacheKey = 'record_definition_field@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_variable_identifier();
        if (result3 !== null) {
          var savedPos2 = pos;
          var savedPos3 = pos;
          var result12 = parse_space();
          if (result12 !== null) {
            var result10 = [];
            while (result12 !== null) {
              result10.push(result12);
              var result12 = parse_space();
            }
          } else {
            var result10 = null;
          }
          if (result10 !== null) {
            var result11 = parse_type_identifier();
            if (result11 !== null) {
              var result8 = [result10, result11];
            } else {
              var result8 = null;
              pos = savedPos3;
            }
          } else {
            var result8 = null;
            pos = savedPos3;
          }
          var result9 = result8 !== null
            ? (function(t) { return t; })(result8[1])
            : null;
          if (result9 !== null) {
            var result7 = result9;
          } else {
            var result7 = null;
            pos = savedPos2;
          }
          var result4 = result7 !== null ? result7 : '';
          if (result4 !== null) {
            var result5 = [];
            var result6 = parse_space();
            while (result6 !== null) {
              result5.push(result6);
              var result6 = parse_space();
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(name, type) {
              return {
                'type': 'record_definition_field',
                'name': name,
                'type': type
              };
            })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_function_definition() {
        var cacheKey = 'function_definition@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 4) === "func") {
          var result3 = "func";
          pos += 4;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"func\"");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          var result21 = parse_space();
          while (result21 !== null) {
            result4.push(result21);
            var result21 = parse_space();
          }
          if (result4 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result5 = "(";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result5 !== null) {
              var result6 = [];
              var result20 = parse_space();
              while (result20 !== null) {
                result6.push(result20);
                var result20 = parse_space();
              }
              if (result6 !== null) {
                var result19 = parse_function_definition_parameters();
                var result7 = result19 !== null ? result19 : '';
                if (result7 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result8 = ")";
                    pos += 1;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result8 !== null) {
                    var result9 = [];
                    var result18 = parse_space();
                    while (result18 !== null) {
                      result9.push(result18);
                      var result18 = parse_space();
                    }
                    if (result9 !== null) {
                      if (input.substr(pos, 1) === "{") {
                        var result10 = "{";
                        pos += 1;
                      } else {
                        var result10 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"{\"");
                        }
                      }
                      if (result10 !== null) {
                        var result11 = [];
                        var result17 = parse_space();
                        while (result17 !== null) {
                          result11.push(result17);
                          var result17 = parse_space();
                        }
                        if (result11 !== null) {
                          var result12 = [];
                          var result16 = parse_binary_expression();
                          while (result16 !== null) {
                            result12.push(result16);
                            var result16 = parse_binary_expression();
                          }
                          if (result12 !== null) {
                            if (input.substr(pos, 1) === "}") {
                              var result13 = "}";
                              pos += 1;
                            } else {
                              var result13 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"}\"");
                              }
                            }
                            if (result13 !== null) {
                              var result14 = [];
                              var result15 = parse_space();
                              while (result15 !== null) {
                                result14.push(result15);
                                var result15 = parse_space();
                              }
                              if (result14 !== null) {
                                var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14];
                              } else {
                                var result1 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(ps, es) {
              return {
                'type': 'function_definition',
                'parameters': ps,
                'body': es
              };
            })(result1[4], result1[9])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_function_definition_parameters() {
        var cacheKey = 'function_definition_parameters@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_function_definition_parameter();
        if (result3 !== null) {
          var result4 = [];
          var result13 = parse_space();
          while (result13 !== null) {
            result4.push(result13);
            var result13 = parse_space();
          }
          if (result4 !== null) {
            var result5 = [];
            var savedPos2 = pos;
            var savedPos3 = pos;
            if (input.substr(pos, 1) === ",") {
              var result9 = ",";
              pos += 1;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("\",\"");
              }
            }
            if (result9 !== null) {
              var result10 = [];
              var result12 = parse_space();
              while (result12 !== null) {
                result10.push(result12);
                var result12 = parse_space();
              }
              if (result10 !== null) {
                var result11 = parse_function_definition_parameter();
                if (result11 !== null) {
                  var result7 = [result9, result10, result11];
                } else {
                  var result7 = null;
                  pos = savedPos3;
                }
              } else {
                var result7 = null;
                pos = savedPos3;
              }
            } else {
              var result7 = null;
              pos = savedPos3;
            }
            var result8 = result7 !== null
              ? (function(p) { return p; })(result7[2])
              : null;
            if (result8 !== null) {
              var result6 = result8;
            } else {
              var result6 = null;
              pos = savedPos2;
            }
            while (result6 !== null) {
              result5.push(result6);
              var savedPos2 = pos;
              var savedPos3 = pos;
              if (input.substr(pos, 1) === ",") {
                var result9 = ",";
                pos += 1;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result9 !== null) {
                var result10 = [];
                var result12 = parse_space();
                while (result12 !== null) {
                  result10.push(result12);
                  var result12 = parse_space();
                }
                if (result10 !== null) {
                  var result11 = parse_function_definition_parameter();
                  if (result11 !== null) {
                    var result7 = [result9, result10, result11];
                  } else {
                    var result7 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos3;
                }
              } else {
                var result7 = null;
                pos = savedPos3;
              }
              var result8 = result7 !== null
                ? (function(p) { return p; })(result7[2])
                : null;
              if (result8 !== null) {
                var result6 = result8;
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(p, ps) {
              var arr = [];
              arr.push(p);
              arr.push.apply(arr, ps);
              return arr;
            })(result1[0], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_function_definition_parameter() {
        var cacheKey = 'function_definition_parameter@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_variable_identifier();
        if (result3 !== null) {
          var savedPos2 = pos;
          var savedPos3 = pos;
          var result12 = parse_space();
          if (result12 !== null) {
            var result10 = [];
            while (result12 !== null) {
              result10.push(result12);
              var result12 = parse_space();
            }
          } else {
            var result10 = null;
          }
          if (result10 !== null) {
            var result11 = parse_type_identifier();
            if (result11 !== null) {
              var result8 = [result10, result11];
            } else {
              var result8 = null;
              pos = savedPos3;
            }
          } else {
            var result8 = null;
            pos = savedPos3;
          }
          var result9 = result8 !== null
            ? (function(t) { return t; })(result8[1])
            : null;
          if (result9 !== null) {
            var result7 = result9;
          } else {
            var result7 = null;
            pos = savedPos2;
          }
          var result4 = result7 !== null ? result7 : '';
          if (result4 !== null) {
            var result5 = [];
            var result6 = parse_space();
            while (result6 !== null) {
              result5.push(result6);
              var result6 = parse_space();
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(name, type) {
              return {
                'type': 'function_definition_parameter',
                'name': name,
                'type': type
              };
            })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_return_expression() {
        var cacheKey = 'return_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 6) === "return") {
          var result3 = "return";
          pos += 6;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"return\"");
          }
        }
        if (result3 !== null) {
          var result8 = parse_space();
          if (result8 !== null) {
            var result4 = [];
            while (result8 !== null) {
              result4.push(result8);
              var result8 = parse_space();
            }
          } else {
            var result4 = null;
          }
          if (result4 !== null) {
            var result5 = parse_binary_expression();
            if (result5 !== null) {
              var result6 = [];
              var result7 = parse_space();
              while (result7 !== null) {
                result6.push(result7);
                var result7 = parse_space();
              }
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(exp) {
              return {
                'type': 'return',
                'expression': exp
              }
            })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_while_expression() {
        var cacheKey = 'while_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 5) === "while") {
          var result3 = "while";
          pos += 5;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"while\"");
          }
        }
        if (result3 !== null) {
          var result16 = parse_space();
          if (result16 !== null) {
            var result4 = [];
            while (result16 !== null) {
              result4.push(result16);
              var result16 = parse_space();
            }
          } else {
            var result4 = null;
          }
          if (result4 !== null) {
            var result5 = parse_binary_expression();
            if (result5 !== null) {
              var result6 = [];
              var result15 = parse_space();
              while (result15 !== null) {
                result6.push(result15);
                var result15 = parse_space();
              }
              if (result6 !== null) {
                if (input.substr(pos, 1) === "{") {
                  var result7 = "{";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"{\"");
                  }
                }
                if (result7 !== null) {
                  var result8 = [];
                  var result14 = parse_space();
                  while (result14 !== null) {
                    result8.push(result14);
                    var result14 = parse_space();
                  }
                  if (result8 !== null) {
                    var result9 = [];
                    var result13 = parse_binary_expression();
                    while (result13 !== null) {
                      result9.push(result13);
                      var result13 = parse_binary_expression();
                    }
                    if (result9 !== null) {
                      if (input.substr(pos, 1) === "}") {
                        var result10 = "}";
                        pos += 1;
                      } else {
                        var result10 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"}\"");
                        }
                      }
                      if (result10 !== null) {
                        var result11 = [];
                        var result12 = parse_space();
                        while (result12 !== null) {
                          result11.push(result12);
                          var result12 = parse_space();
                        }
                        if (result11 !== null) {
                          var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11];
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(e, es) {
              return {
                'type': 'while',
                'condition': e,
                'body': es
              };
            })(result1[2], result1[6])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_if_expression() {
        var cacheKey = 'if_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 2) === "if") {
          var result3 = "if";
          pos += 2;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"if\"");
          }
        }
        if (result3 !== null) {
          var result35 = parse_space();
          if (result35 !== null) {
            var result4 = [];
            while (result35 !== null) {
              result4.push(result35);
              var result35 = parse_space();
            }
          } else {
            var result4 = null;
          }
          if (result4 !== null) {
            var result5 = parse_binary_expression();
            if (result5 !== null) {
              var result6 = [];
              var result34 = parse_space();
              while (result34 !== null) {
                result6.push(result34);
                var result34 = parse_space();
              }
              if (result6 !== null) {
                if (input.substr(pos, 1) === "{") {
                  var result7 = "{";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"{\"");
                  }
                }
                if (result7 !== null) {
                  var result8 = [];
                  var result33 = parse_space();
                  while (result33 !== null) {
                    result8.push(result33);
                    var result33 = parse_space();
                  }
                  if (result8 !== null) {
                    var result9 = [];
                    var result32 = parse_binary_expression();
                    while (result32 !== null) {
                      result9.push(result32);
                      var result32 = parse_binary_expression();
                    }
                    if (result9 !== null) {
                      if (input.substr(pos, 1) === "}") {
                        var result10 = "}";
                        pos += 1;
                      } else {
                        var result10 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"}\"");
                        }
                      }
                      if (result10 !== null) {
                        var result11 = [];
                        var result31 = parse_space();
                        while (result31 !== null) {
                          result11.push(result31);
                          var result31 = parse_space();
                        }
                        if (result11 !== null) {
                          var result12 = [];
                          var result30 = parse_if_expression_alternatives();
                          while (result30 !== null) {
                            result12.push(result30);
                            var result30 = parse_if_expression_alternatives();
                          }
                          if (result12 !== null) {
                            var result13 = [];
                            var result29 = parse_space();
                            while (result29 !== null) {
                              result13.push(result29);
                              var result29 = parse_space();
                            }
                            if (result13 !== null) {
                              var savedPos2 = pos;
                              var savedPos3 = pos;
                              if (input.substr(pos, 4) === "else") {
                                var result20 = "else";
                                pos += 4;
                              } else {
                                var result20 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"else\"");
                                }
                              }
                              if (result20 !== null) {
                                var result21 = [];
                                var result28 = parse_space();
                                while (result28 !== null) {
                                  result21.push(result28);
                                  var result28 = parse_space();
                                }
                                if (result21 !== null) {
                                  if (input.substr(pos, 1) === "{") {
                                    var result22 = "{";
                                    pos += 1;
                                  } else {
                                    var result22 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"{\"");
                                    }
                                  }
                                  if (result22 !== null) {
                                    var result23 = [];
                                    var result27 = parse_space();
                                    while (result27 !== null) {
                                      result23.push(result27);
                                      var result27 = parse_space();
                                    }
                                    if (result23 !== null) {
                                      var result24 = [];
                                      var result26 = parse_binary_expression();
                                      while (result26 !== null) {
                                        result24.push(result26);
                                        var result26 = parse_binary_expression();
                                      }
                                      if (result24 !== null) {
                                        if (input.substr(pos, 1) === "}") {
                                          var result25 = "}";
                                          pos += 1;
                                        } else {
                                          var result25 = null;
                                          if (reportMatchFailures) {
                                            matchFailed("\"}\"");
                                          }
                                        }
                                        if (result25 !== null) {
                                          var result18 = [result20, result21, result22, result23, result24, result25];
                                        } else {
                                          var result18 = null;
                                          pos = savedPos3;
                                        }
                                      } else {
                                        var result18 = null;
                                        pos = savedPos3;
                                      }
                                    } else {
                                      var result18 = null;
                                      pos = savedPos3;
                                    }
                                  } else {
                                    var result18 = null;
                                    pos = savedPos3;
                                  }
                                } else {
                                  var result18 = null;
                                  pos = savedPos3;
                                }
                              } else {
                                var result18 = null;
                                pos = savedPos3;
                              }
                              var result19 = result18 !== null
                                ? (function(else_es) { return else_es; })(result18[4])
                                : null;
                              if (result19 !== null) {
                                var result17 = result19;
                              } else {
                                var result17 = null;
                                pos = savedPos2;
                              }
                              var result14 = result17 !== null ? result17 : '';
                              if (result14 !== null) {
                                var result15 = [];
                                var result16 = parse_space();
                                while (result16 !== null) {
                                  result15.push(result16);
                                  var result16 = parse_space();
                                }
                                if (result15 !== null) {
                                  var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15];
                                } else {
                                  var result1 = null;
                                  pos = savedPos1;
                                }
                              } else {
                                var result1 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(c, es, alt, rest) {
              return {
                'type': 'if',
                'condition': c,
                'body': es,
                'alternatives': alt,
                'else': rest
              };
            })(result1[2], result1[6], result1[9], result1[11])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_if_expression_alternatives() {
        var cacheKey = 'if_expression_alternatives@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 6) === "elseif") {
          var result3 = "elseif";
          pos += 6;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"elseif\"");
          }
        }
        if (result3 !== null) {
          var result16 = parse_space();
          if (result16 !== null) {
            var result4 = [];
            while (result16 !== null) {
              result4.push(result16);
              var result16 = parse_space();
            }
          } else {
            var result4 = null;
          }
          if (result4 !== null) {
            var result5 = parse_binary_expression();
            if (result5 !== null) {
              var result6 = [];
              var result15 = parse_space();
              while (result15 !== null) {
                result6.push(result15);
                var result15 = parse_space();
              }
              if (result6 !== null) {
                if (input.substr(pos, 1) === "{") {
                  var result7 = "{";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"{\"");
                  }
                }
                if (result7 !== null) {
                  var result8 = [];
                  var result14 = parse_space();
                  while (result14 !== null) {
                    result8.push(result14);
                    var result14 = parse_space();
                  }
                  if (result8 !== null) {
                    var result9 = [];
                    var result13 = parse_binary_expression();
                    while (result13 !== null) {
                      result9.push(result13);
                      var result13 = parse_binary_expression();
                    }
                    if (result9 !== null) {
                      if (input.substr(pos, 1) === "}") {
                        var result10 = "}";
                        pos += 1;
                      } else {
                        var result10 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"}\"");
                        }
                      }
                      if (result10 !== null) {
                        var result11 = [];
                        var result12 = parse_space();
                        while (result12 !== null) {
                          result11.push(result12);
                          var result12 = parse_space();
                        }
                        if (result11 !== null) {
                          var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11];
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(c, es) {
              return {
                'type': 'elseif',
                'condition': c,
                'body': es
              }
            })(result1[2], result1[6])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_constructor() {
        var cacheKey = 'constructor@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_type_identifier();
        if (result3 !== null) {
          var result4 = [];
          var result13 = parse_space();
          while (result13 !== null) {
            result4.push(result13);
            var result13 = parse_space();
          }
          if (result4 !== null) {
            if (input.substr(pos, 1) === "{") {
              var result5 = "{";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"{\"");
              }
            }
            if (result5 !== null) {
              var result6 = [];
              var result12 = parse_space();
              while (result12 !== null) {
                result6.push(result12);
                var result12 = parse_space();
              }
              if (result6 !== null) {
                var result11 = parse_parameters();
                var result7 = result11 !== null ? result11 : '';
                if (result7 !== null) {
                  if (input.substr(pos, 1) === "}") {
                    var result8 = "}";
                    pos += 1;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"}\"");
                    }
                  }
                  if (result8 !== null) {
                    var result9 = [];
                    var result10 = parse_space();
                    while (result10 !== null) {
                      result9.push(result10);
                      var result10 = parse_space();
                    }
                    if (result9 !== null) {
                      var result1 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(type, es) {
              return {
                'type': 'constructor',
                'name': type,
                'arguments': es
              };
            })(result1[0], result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_parameters() {
        var cacheKey = 'parameters@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_binary_expression();
        if (result3 !== null) {
          var result4 = [];
          var result15 = parse_space();
          while (result15 !== null) {
            result4.push(result15);
            var result15 = parse_space();
          }
          if (result4 !== null) {
            var result5 = [];
            var savedPos2 = pos;
            var savedPos3 = pos;
            if (input.substr(pos, 1) === ",") {
              var result9 = ",";
              pos += 1;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("\",\"");
              }
            }
            if (result9 !== null) {
              var result10 = [];
              var result14 = parse_space();
              while (result14 !== null) {
                result10.push(result14);
                var result14 = parse_space();
              }
              if (result10 !== null) {
                var result11 = parse_binary_expression();
                if (result11 !== null) {
                  var result12 = [];
                  var result13 = parse_space();
                  while (result13 !== null) {
                    result12.push(result13);
                    var result13 = parse_space();
                  }
                  if (result12 !== null) {
                    var result7 = [result9, result10, result11, result12];
                  } else {
                    var result7 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos3;
                }
              } else {
                var result7 = null;
                pos = savedPos3;
              }
            } else {
              var result7 = null;
              pos = savedPos3;
            }
            var result8 = result7 !== null
              ? (function(e) { return e; })(result7[2])
              : null;
            if (result8 !== null) {
              var result6 = result8;
            } else {
              var result6 = null;
              pos = savedPos2;
            }
            while (result6 !== null) {
              result5.push(result6);
              var savedPos2 = pos;
              var savedPos3 = pos;
              if (input.substr(pos, 1) === ",") {
                var result9 = ",";
                pos += 1;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result9 !== null) {
                var result10 = [];
                var result14 = parse_space();
                while (result14 !== null) {
                  result10.push(result14);
                  var result14 = parse_space();
                }
                if (result10 !== null) {
                  var result11 = parse_binary_expression();
                  if (result11 !== null) {
                    var result12 = [];
                    var result13 = parse_space();
                    while (result13 !== null) {
                      result12.push(result13);
                      var result13 = parse_space();
                    }
                    if (result12 !== null) {
                      var result7 = [result9, result10, result11, result12];
                    } else {
                      var result7 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result7 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos3;
                }
              } else {
                var result7 = null;
                pos = savedPos3;
              }
              var result8 = result7 !== null
                ? (function(e) { return e; })(result7[2])
                : null;
              if (result8 !== null) {
                var result6 = result8;
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(e, es) {
              var arr = [];
              arr.push(e);
              arr.push.apply(arr, es);
              return arr;
            })(result1[0], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_reference() {
        var cacheKey = 'reference@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result7 = parse_variable_identifier();
        if (result7 !== null) {
          var result3 = result7;
        } else {
          var result6 = parse_type_identifier();
          if (result6 !== null) {
            var result3 = result6;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var result4 = [];
          var result5 = parse_space();
          while (result5 !== null) {
            result4.push(result5);
            var result5 = parse_space();
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(e) { return e; })(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_numeric_literal() {
        var cacheKey = 'numeric_literal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result6 = input.charAt(pos);
          pos++;
        } else {
          var result6 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result6 !== null) {
          var result3 = [];
          while (result6 !== null) {
            result3.push(result6);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result6 = input.charAt(pos);
              pos++;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result3 = null;
        }
        if (result3 !== null) {
          var result4 = [];
          var result5 = parse_space();
          while (result5 !== null) {
            result4.push(result5);
            var result5 = parse_space();
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(ds) {
              return {
                'type': 'integer',
                'value': parseInt(ds.join(''), 10)
              };
            })(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_string_literal() {
        var cacheKey = 'string_literal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "\"") {
          var result3 = "\"";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          if (input.substr(pos).match(/^[^"]/) !== null) {
            var result6 = input.charAt(pos);
            pos++;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("[^\"]");
            }
          }
          while (result6 !== null) {
            result4.push(result6);
            if (input.substr(pos).match(/^[^"]/) !== null) {
              var result6 = input.charAt(pos);
              pos++;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("[^\"]");
              }
            }
          }
          if (result4 !== null) {
            if (input.substr(pos, 1) === "\"") {
              var result5 = "\"";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(str) {
              return {
                'type': 'string',
                'value': str.join("")
              };
            })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_variable_identifier() {
        var cacheKey = 'variable_identifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos).match(/^[a-z]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[a-z]");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          if (input.substr(pos).match(/^[a-zA-Z_0-9]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("[a-zA-Z_0-9]");
            }
          }
          while (result5 !== null) {
            result4.push(result5);
            if (input.substr(pos).match(/^[a-zA-Z_0-9]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("[a-zA-Z_0-9]");
              }
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(l, ls) { return l + ls.join(""); })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_type_identifier() {
        var cacheKey = 'type_identifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = [];
        if (input.substr(pos, 1) === "^") {
          var result7 = "^";
          pos += 1;
        } else {
          var result7 = null;
          if (reportMatchFailures) {
            matchFailed("\"^\"");
          }
        }
        while (result7 !== null) {
          result3.push(result7);
          if (input.substr(pos, 1) === "^") {
            var result7 = "^";
            pos += 1;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("\"^\"");
            }
          }
        }
        if (result3 !== null) {
          if (input.substr(pos).match(/^[A-Z]/) !== null) {
            var result4 = input.charAt(pos);
            pos++;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("[A-Z]");
            }
          }
          if (result4 !== null) {
            var result5 = [];
            if (input.substr(pos).match(/^[a-zA-Z_0-9]/) !== null) {
              var result6 = input.charAt(pos);
              pos++;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("[a-zA-Z_0-9]");
              }
            }
            while (result6 !== null) {
              result5.push(result6);
              if (input.substr(pos).match(/^[a-zA-Z_0-9]/) !== null) {
                var result6 = input.charAt(pos);
                pos++;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("[a-zA-Z_0-9]");
                }
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(ps, l, ls) { return ps.join("") + l + ls.join(""); })(result1[0], result1[1], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_space() {
        var cacheKey = 'space@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[\n\r	 ]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[\\n\\r	 ]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
